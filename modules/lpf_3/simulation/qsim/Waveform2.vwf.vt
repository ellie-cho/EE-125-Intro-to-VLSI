// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/26/2023 10:32:42"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lpf
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lpf_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [23:0] input_data;
reg reset;
// wires                                               
wire [23:0] delay_line_0;
wire [23:0] filtered_output;

// assign statements (if any)                          
lpf i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.delay_line_0(delay_line_0),
	.filtered_output(filtered_output),
	.input_data(input_data),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// input_data[ 23 ]
initial
begin
	input_data[23] = 1'b0;
	input_data[23] = #220000 1'b1;
	input_data[23] = #40000 1'b0;
end 
// input_data[ 22 ]
initial
begin
	input_data[22] = 1'b0;
	input_data[22] = #220000 1'b1;
	input_data[22] = #40000 1'b0;
end 
// input_data[ 21 ]
initial
begin
	input_data[21] = 1'b0;
	input_data[21] = #220000 1'b1;
	input_data[21] = #40000 1'b0;
end 
// input_data[ 20 ]
initial
begin
	input_data[20] = 1'b0;
	input_data[20] = #220000 1'b1;
	input_data[20] = #40000 1'b0;
end 
// input_data[ 19 ]
initial
begin
	input_data[19] = 1'b0;
	input_data[19] = #220000 1'b1;
	input_data[19] = #40000 1'b0;
end 
// input_data[ 18 ]
initial
begin
	input_data[18] = 1'b0;
	input_data[18] = #220000 1'b1;
	input_data[18] = #40000 1'b0;
end 
// input_data[ 17 ]
initial
begin
	input_data[17] = 1'b0;
	input_data[17] = #220000 1'b1;
	input_data[17] = #40000 1'b0;
end 
// input_data[ 16 ]
initial
begin
	input_data[16] = 1'b0;
	input_data[16] = #220000 1'b1;
	input_data[16] = #40000 1'b0;
end 
// input_data[ 15 ]
initial
begin
	input_data[15] = 1'b0;
	input_data[15] = #220000 1'b1;
	input_data[15] = #40000 1'b0;
end 
// input_data[ 14 ]
initial
begin
	input_data[14] = 1'b0;
	input_data[14] = #220000 1'b1;
	input_data[14] = #40000 1'b0;
end 
// input_data[ 13 ]
initial
begin
	input_data[13] = 1'b0;
	input_data[13] = #220000 1'b1;
	input_data[13] = #40000 1'b0;
end 
// input_data[ 12 ]
initial
begin
	input_data[12] = 1'b0;
	input_data[12] = #220000 1'b1;
	input_data[12] = #40000 1'b0;
end 
// input_data[ 11 ]
initial
begin
	input_data[11] = 1'b0;
	input_data[11] = #220000 1'b1;
	input_data[11] = #40000 1'b0;
end 
// input_data[ 10 ]
initial
begin
	input_data[10] = 1'b0;
	input_data[10] = #220000 1'b1;
	input_data[10] = #40000 1'b0;
end 
// input_data[ 9 ]
initial
begin
	input_data[9] = 1'b0;
	input_data[9] = #220000 1'b1;
	input_data[9] = #40000 1'b0;
end 
// input_data[ 8 ]
initial
begin
	input_data[8] = 1'b0;
	input_data[8] = #220000 1'b1;
	input_data[8] = #40000 1'b0;
end 
// input_data[ 7 ]
initial
begin
	input_data[7] = 1'b0;
	input_data[7] = #220000 1'b1;
	input_data[7] = #40000 1'b0;
end 
// input_data[ 6 ]
initial
begin
	input_data[6] = 1'b0;
	input_data[6] = #220000 1'b1;
	input_data[6] = #40000 1'b0;
end 
// input_data[ 5 ]
initial
begin
	input_data[5] = 1'b0;
	input_data[5] = #220000 1'b1;
	input_data[5] = #40000 1'b0;
end 
// input_data[ 4 ]
initial
begin
	input_data[4] = 1'b0;
	input_data[4] = #220000 1'b1;
	input_data[4] = #40000 1'b0;
end 
// input_data[ 3 ]
initial
begin
	input_data[3] = 1'b0;
	input_data[3] = #220000 1'b1;
	input_data[3] = #40000 1'b0;
end 
// input_data[ 2 ]
initial
begin
	input_data[2] = 1'b0;
	input_data[2] = #220000 1'b1;
	input_data[2] = #40000 1'b0;
end 
// input_data[ 1 ]
initial
begin
	input_data[1] = 1'b0;
	input_data[1] = #220000 1'b1;
	input_data[1] = #40000 1'b0;
end 
// input_data[ 0 ]
initial
begin
	input_data[0] = 1'b0;
	input_data[0] = #220000 1'b1;
	input_data[0] = #40000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #40000 1'b1;
	reset = #40000 1'b0;
end 
endmodule

