library ieee;
use ieee.std_logic_1164.all;

entity vga is
	 generic (
	 H_LOW: natural := 96;
	 HBP: natural := 48;
	 H_HIGH: natural := 640;
	 HFP: natural := 16;
	 V_LOW: natural := 2;
	 VBP: natural := 33;
	 V_HIGH: natural := 480;
	 VFP: natural := 10);
	 port (
	 clk: in std_logic; --50MHz system clock
	 R_switch, G_switch, B_switch: in std_logic;
	 Hsync, Vsync: out std_logic;
	 R, G, B: out std_logic_vector(9 downto 0);
	 BLANKn, SYNCn : out std_logic);
end entity;

architecture rtl of vga is
	 signal Hactive, Vactive, dena: std_logic;
	 signal clk_vga, Hsyn, Vsyn: std_logic;
begin


	--CIRCUIT 1: CONTROL GENERATOR
	--Static signals for DAC:
	 BLANKn <= '1'; --no blanking
	 SYNCn <= '0'; --no sync on green
	 --Create VGA clock (50MHz -> 25MHz):
	 process (clk)
	 begin
		 if rising_edge(clk) then
			clk_vga <= not clk_vga;
		 end if;
	 end process;
	 
	 --Create horizontal signals:
	 process (clk_vga)
		variable Hcount: natural range 0 to H_LOW + HBP + H_HIGH + HFP;
	begin
	 if rising_edge(clk_vga) then
		 Hcount := Hcount + 1;
		 if Hcount = H_LOW then
			Hsyn <= '1';
		 elsif Hcount = H_LOW + HBP then
			Hactive <= '1';
		 elsif Hcount = H_LOW + HBP + H_HIGH then
			Hactive <= '0';
		 elsif Hcount = H_LOW + HBP + H_HIGH + HFP then
			Hsyn <= '0';
			Hcount := 0;
		end if;
	end if;
end process;
 Hsync <= Hsyn; --internal signal converted to output

 
 --Create vertical signals:
 process (Hsyn)
	 variable Vcount: natural range 0 to V_LOW + VBP + V_HIGH + VFP;
 begin
	 if rising_edge(Hsyn) then
		Vcount := Vcount + 1;
		if Vcount = V_LOW then
			Vsyn <= '1';
		elsif Vcount = V_LOW + VBP then
			Vactive <= '1';
		elsif Vcount = V_LOW + VBP + V_HIGH then
			Vactive <= '0';
		elsif Vcount = V_LOW + VBP + V_HIGH + VFP then
			 Vsyn <= '0';
			 Vcount := 0;
		end if;
	 end if;
 end process;
 Vsync <= Vsyn; --not needed for Vsync; done just to match what was done to Hsync
 
 
 --Enable display:
 dena <= Hactive and Vactive;
 
 --CIRCUIT 2: IMAGE GENERATOR
 process (all)
	variable line_count: natural range 0 to V_HIGH;
 begin 
	 if rising_edge(Hsyn) then
		if Vactive then
			line_count := line_count + 1;
		 else
			line_count := 0;
		 end if;
	 end if;
	 if dena then
		 case line_count is
			 when 0 =>
			 R <= (others => '1');
			 G <= (others => '0');
			 B <= (others => '0');
			 when 1 | 2 | 479 =>
			 R <= (others => '0');
			 G <= (others => '1');
			 B <= (others => '0');
			 when 3 to 5 =>
			 R <= (others => '0');
			 G <= (others => '0');
			 B <= (others => '1');
			 when others =>
			 R <= (others => R_switch);
			 G <= (others => G_switch);
			 B <= (others => B_switch);
			 end case;
		 else
			 R <= (others => '0');
			 G <= (others => '0');
			 B <= (others => '0');
		 end if;
	 end process;
end architecture;
---------------------

 

